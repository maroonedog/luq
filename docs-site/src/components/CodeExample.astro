---
import CodeBlock from './CodeBlock.astro';

const traditionalCode = `// Define schema (types are generated)
const UserSchema = z.object({
  name: z.string().min(3),
  email: z.string().email(),
  age: z.number().min(18),
  role: z.enum(['admin', 'user']),
  settings: z.object({
    notifications: z.boolean(),
    theme: z.enum(['light', 'dark'])
  })
});

// Extract type from schema
type User = z.infer<typeof UserSchema>;

// Custom business logic
const schema = UserSchema.refine(
  (data) => {
    // Inline custom validation
    if (data.role === 'admin' && data.age < 21) {
      return false;
    }
    return true;
  },
  { message: 'Admins must be 21 or older' }
);

// Validate
const result = schema.safeParse(userData);`;

const luqCode = `// Use existing TypeScript types
type User = {
  name: string;
  email: string;
  age: number;
  role: 'admin' | 'user';
  settings: {
    notifications: boolean;
    theme: 'light' | 'dark';
  };
};

// Create reusable business logic plugin
const adminAgePlugin = plugin({
  name: 'adminAge',
  methodName: 'adminAge',
  allowedTypes: ['number'] as const,
  category: 'standard',
  impl: (options?: ValidationOptions) => ({
    check: (value: any, context: any) => {
      const parent = context?.parent;
      return parent?.role !== 'admin' || value >= 21;
    },
    code: 'admin_age',
    getErrorMessage: () => 'Admins must be 21 or older',
    params: []
  })
});

// Build validator with plugins
const validator = Builder()
  .use(requiredPlugin)
  .use(stringMinPlugin)
  .use(stringEmailPlugin)
  .use(numberMinPlugin)
  .use(adminAgePlugin)
  .for<User>()
  .v('name', b => b.string.required().min(3))
  .v('email', b => b.string.required().email())
  .v('age', b => b.number.required().min(18).adminAge())
  .v('role', b => b.required())
  .build();

// Validate with full type safety
const result = validator.validate(userData);`;
---

<div class="grid lg:grid-cols-2 gap-8">
  <!-- Traditional Approach -->
  <div class="luq-card overflow-hidden">
    <div class="bg-luq-neutral-100 dark:bg-luq-neutral-800 px-6 py-4 border-b border-luq-neutral-200 dark:border-luq-neutral-700">
      <h3 class="font-semibold">Traditional Schema-Based Approach</h3>
    </div>
    <div class="p-6">
      <CodeBlock code={traditionalCode} language="typescript" showCopy={true} class="" />
    </div>
  </div>
  
  <!-- Luq Approach -->
  <div class="luq-card overflow-hidden border-2 border-luq-purple-200 dark:border-luq-purple-800">
    <div class="bg-gradient-to-r from-luq-purple-100 to-luq-teal-100 dark:from-luq-purple-900/30 dark:to-luq-teal-900/30 px-6 py-4 border-b border-luq-purple-200 dark:border-luq-purple-800">
      <h3 class="font-semibold">Luq Type-First Approach</h3>
    </div>
    <div class="p-6">
      <CodeBlock code={luqCode} language="typescript" showCopy={true} class="" />
    </div>
  </div>
</div>

<div class="mt-8 text-center">
  <div class="inline-flex items-center space-x-6 text-sm">
    <div class="flex items-center">
      <div class="w-4 h-4 bg-luq-purple-200 dark:bg-luq-purple-800 rounded mr-2"></div>
      <span class="text-luq-neutral-600 dark:text-luq-neutral-400">Luq advantages highlighted</span>
    </div>
    <div class="flex items-center">
      <svg class="w-5 h-5 text-luq-teal-500 mr-2" fill="currentColor" viewBox="0 0 20 20">
        <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" />
      </svg>
      <span class="text-luq-neutral-600 dark:text-luq-neutral-400">Business logic as reusable plugins</span>
    </div>
  </div>
</div>