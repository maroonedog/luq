import { plugin } from "../builder/plugins/plugin-creator";
import {
  ValidationOptions,
  ValidationResultWithFlags,
  SkipAllValidationFlag,
} from "./types";

// All types that skip can be applied to
const allTypes = [
  "string",
  "number",
  "boolean",
  "array",
  "object",
  "date",
  "union",
] as const;

/**
 * @luq-plugin
 * @name skip
 * @category conditional
 * @description Completely skips validation for a field based on a dynamic condition
 * @allowedTypes ["string", "number", "boolean", "array", "object", "date", "union"]
 * @example
 * ```typescript
 * // Skip validation when not needed
 * const validator = Builder()
 *   .use(skipPlugin)
 *   .for<FormData>()
 *   .v("advancedOptions", b =>
 *     b.object
 *       .skip(values => !values.showAdvanced)
 *       .required()
 *   )
 *   .build();
 *
 * // Skip debug fields in production
 * builder.v("debugInfo", b =>
 *   b.string
 *     .skip(values => values.environment === 'production')
 *     .min(10)
 * )
 *
 * // Skip entire sections conditionally
 * builder.v("enterpriseSettings", b =>
 *   b.object
 *     .skip(values => values.plan !== 'enterprise')
 *     .recursively()
 * )
 * ```
 * @params
 * - condition: (allValues: TObject) => boolean - Function that returns true if field should be skipped
 * - options?: ValidationOptions - Optional configuration
 * @returns Validation function that skips field entirely when condition is true
 * @customError
 * ```typescript
 * This plugin does not generate errors - it removes fields from validation
 * ```
 * @since 0.1.0-alpha
 */
export const skipPlugin = plugin({
  name: "skip",
  methodName: "skip",
  allowedTypes: allTypes,
  category: "conditional",
  impl: <TObject>(
    condition: (allValues: TObject) => boolean,
    options?: ValidationOptions
  ) => {
    // Return a special validator that signals to skip all validation
    return {
      // The check function should always return true when skip is active
      check: (value: any, allValues?: TObject) => {
        // This function is called only if shouldSkipAllValidation returns false
        // So always return true (field is valid)
        return true;
      },
      // Special function that unified-validator looks for
      shouldSkipAllValidation: (value: any, allValues?: TObject) => {
        if (!allValues) {
          return false; // If no context, don't skip
        }
        // Return true to skip all validation when condition is met
        return condition(allValues);
      },
      code: "skip",

      getErrorMessage: () => {
        // This should never be called since skip always returns true
        return "Skip condition not met";
      },
      params: [condition, options],
      // Metadata for optimization
      metadata: {
        type: "conditional",
        category: "skip",
        skipCondition: condition,
        async: false,
      },
    };
  },
  // Metadata for optimized error handling (no errors generated by this plugin)
});
