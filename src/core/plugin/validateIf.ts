import { plugin } from "../builder/plugins/plugin-creator";
import {
  ValidationOptions,
  ValidationResultWithFlags,
  SkipAllValidationFlag,
  MessageContext,
} from "./types";

// Type-safe context for validateIf plugin
export interface ValidateIfContext extends MessageContext {
  condition?: boolean;
}

// V8 Optimization: Module-level constants

const SKIP_ALL_RESULT = Object.freeze({
  valid: true,
  __skipAllValidation: true,
});

// All types that validateIf can be applied to
const allTypes = [
  "string",
  "number",
  "boolean",
  "array",
  "object",
  "date",
  "union",
] as const;

/**
 * @luq-plugin
 * @name validateIf
 * @category conditional
 * @description Conditionally applies all validation rules to a field based on a dynamic condition, with support for array context validation
 * @allowedTypes ["string", "number", "boolean", "array", "object", "date", "union"]
 * @example
 * ```typescript
 * // Validate URL only when custom endpoint is enabled
 * const validator = Builder()
 *   .use(validateIfPlugin)
 *   .for<ConfigData>()
 *   .v("customEndpoint", b =>
 *     b.string
 *       .validateIf(values => values.useCustomEndpoint)
 *       .url()
 *       .min(10)
 *   )
 *   .build();
 *
 * // Skip validation in local environment
 * builder.v("apiKey", b =>
 *   b.string
 *     .validateIf(values => values.environment !== 'local')
 *     .required()
 *     .min(32)
 * )
 *
 * // Conditional sections in forms
 * builder.v("businessDetails.taxId", b =>
 *   b.string
 *     .validateIf(values => values.accountType === 'business')
 *     .required()
 *     .pattern(/^\d{9}$/)
 * )
 * ```
 * @params
 * - condition: (allValues: TObject, arrayContext?: ArrayContext) => boolean - Function that returns true if validation should run, with access to array context
 * - options?: ValidationOptions - Optional configuration
 * @returns Validation function that skips all validations when condition is false
 * @customError
 * ```typescript
 * This plugin does not generate errors - it controls whether validation runs
 * ```
 * @since 0.1.0-alpha
 */
export const validateIfPlugin = plugin({
  name: "validateIf",
  methodName: "validateIf",
  allowedTypes: allTypes,
  category: "conditional",
  impl: <TObject>(
    condition: (
      allValues: TObject,
      arrayContext?: import("./types").ArrayContext
    ) => boolean,
    options?: ValidationOptions<ValidateIfContext>
  ) => {
    // Return hoisted validator format with special validation control
    return {
      check: (
        value: any,
        allValues?: TObject,
        arrayContext?: import("./types").ArrayContext
      ) => {
        // For conditional plugins, we need access to allValues
        if (!allValues) {
          // If allValues not provided, allow validation to proceed
          return true;
        }

        // Evaluate condition with all form values and optional arrayContext
        const shouldValidate = condition(allValues, arrayContext);

        if (!shouldValidate) {
          // Signal that all validation should be skipped
          // The hoisting layer should handle this
          return true; // Return true but mark for skipping
        }

        // Continue with normal validation
        return true;
      },
      code: "validateIf",

      getErrorMessage: () => {
        // This plugin never generates errors
        throw new Error("validateIf plugin should never generate errors");
      },
      params: [condition, options],
      // Special method to check if all validation should be skipped
      shouldSkipAllValidation: (
        value: any,
        allValues?: TObject,
        arrayContext?: import("./types").ArrayContext
      ) => {
        if (!allValues) return false;
        const shouldValidate = condition(allValues, arrayContext);
        return !shouldValidate; // Skip all validation when condition is false
      },
    };
  },
  // Metadata for optimized error handling (no errors generated by this plugin)
});
