import { plugin } from "../builder/plugins/plugin-creator";
import {
  ValidationOptions,
  ValidationResultWithFlags,
  SkipFurtherValidationFlag,
  MessageContext,
} from "./types";

// Type-safe context for optionalIf plugin
export interface OptionalIfContext extends MessageContext {
  condition?: boolean;
}

// V8 Optimization: Module-level constants

const SKIP_RESULT = Object.freeze({
  valid: true,
  __skipFurtherValidation: true,
});

// All types that optionalIf can be applied to
const allTypes = [
  "string",
  "number",
  "boolean",
  "array",
  "object",
  "date",
  "union",
] as const;

/**
 * @luq-plugin
 * @name optionalIf
 * @category conditional
 * @description Makes a field optional based on a dynamic condition evaluated at validation time, with support for array context validation
 * @allowedTypes ["string", "number", "boolean", "array", "object", "date", "union"]
 * @example
 * ```typescript
 * // Basic conditional optional
 * const validator = Builder()
 *   .use(optionalIfPlugin)
 *   .for<UserForm>()
 *   .v("middleName", (b) =>
 *     b.string.optionalIf(values => !values.includeMiddleName).min(2)
 *   )
 *   .build();
 *
 * // Phone optional if email provided
 * builder.v("phone", b =>
 *   b.string.optionalIf(values => !!values.email).pattern(/^\d{10}$/)
 * )
 * ```
 * @params
 * - condition: (allValues: TObject, arrayContext?: ArrayContext) => boolean - Condition function that determines if field is optional, with access to array context
 * @returns Validation function that skips validation when condition is true and value is empty
 * @customError
 * This plugin does not generate errors - it conditionally allows empty values
 * @since 0.1.0-alpha
 */
export const optionalIfPlugin = plugin({
  name: "optionalIf",
  methodName: "optionalIf",
  allowedTypes: allTypes,
  category: "conditional",
  impl: <TObject>(
    condition: (
      allValues: TObject,
      arrayContext?: import("./types").ArrayContext
    ) => boolean,
    options?: ValidationOptions<OptionalIfContext>
  ) => {
    // Return hoisted validator format with special optional handling
    return {
      check: (
        value: any,
        allValues?: TObject,
        arrayContext?: import("./types").ArrayContext
      ) => {
        // For conditional plugins, we need access to allValues
        if (!allValues) {
          // If allValues not provided, treat as required
          return !(value === undefined || value === null || value === "");
        }

        // Evaluate condition with all form values and optional arrayContext
        const shouldBeOptional = condition(allValues, arrayContext);

        if (shouldBeOptional) {
          // If optional and value is empty, consider valid
          if (value === undefined || value === null || value === "") {
            return true;
          }
        } else {
          // If not optional (condition is false), field is required
          if (value === undefined || value === null || value === "") {
            return false; // Required validation fails
          }
        }

        // If value exists, always valid (further validation will be done by other plugins)
        return true;
      },
      code: "optionalIf",

      getErrorMessage: (
        value: any,
        path: string,
        allValues?: TObject,
        arrayContext?: import("./types").ArrayContext
      ) => {
        // Generate error message when condition is false and value is missing
        return `Field is optional when condition is met`;
      },
      params: [condition, options],
      // Special flags for conditional plugins
      isOptional: true,
      skipForUndefined: true, // Will be evaluated dynamically
      // Special method to check if validation should be skipped
      shouldSkipValidation: (
        value: any,
        allValues?: TObject,
        arrayContext?: import("./types").ArrayContext
      ) => {
        if (!allValues) return false;
        const shouldBeOptional = condition(allValues, arrayContext);
        return (
          shouldBeOptional &&
          (value === undefined || value === null || value === "")
        );
      },
    };
  },
  // Metadata for optimized error handling (no errors generated by this plugin)
});
